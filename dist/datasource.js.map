{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","id","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","then","res","forEach","result","results","r","series","push","target","s","datapoints","points","tables","refId","map","queryType","replace","scopedVars","datasourceId","method","response","status","message","title","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","timeRange","mapToTextValue","table","search","rows","row","i","text","value","isObject","datasourceRequest","from","valueOf","toString","to","queries"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest(query)\n    .then(result => {\n      var res= [];\n      _.forEach(result.data.results, r => {\n        _.forEach(r.series, s => {\n          res.push({target: s.name, datapoints: s.points});\n        })\n        _.forEach(r.tables, t => {\n          t.type = 'table';\n          t.refId = r.refId;\n          res.push(t);\n        })\n      })\n\n      result.data = res;\n      return result;\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        queryType: 'query',\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        datasourceId: this.id\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var range = this.timeSrv.timeRange();\n    var targets = [{\n      queryType: 'search',\n      target: this.templateSrv.replace(query, null, 'regex'),\n      datasourceId: this.id,\n      refId: \"search\",\n    }];\n    var options = {\n      range: range,\n      targets: targets\n    };\n    return this.doRequest(options).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    var table = result.data.results.search.tables[0];\n\n    if (!table) {\n      return [];\n    }\n\n    return _.map(table.rows, (row, i) => {\n      if (row.length > 1) {\n        return { text: row[0], value: row[1] };\n      } else if (_.isObject(row[0])) {\n        return { text: row[0], value: i};\n      }\n      return { text: row[0], value: row[0] };\n    });\n  }\n\n  doRequest(options) {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: options.targets,\n      }\n    });\n  }\n}\n"]}